<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About on Documentation of php-simple-kafka-client</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/</link><description>Recent content in About on Documentation of php-simple-kafka-client</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Dec 2020 22:09:37 +0100</lastBuildDate><atom:link href="https://php-kafka.github.io/php-simple-kafka-client.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>__construct</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/__construct/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/__construct/</guid><description>Description public function __construct(Configuration $configuration) {} Get a consumer instance
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf);</description></item><item><title>__construct</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/__construct/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/__construct/</guid><description>Description public function __construct( string $message, int $code, string $error_string, bool $isFatal, bool $isRetriable, bool $transactionRequiresAbort ) {} Create new KafkaErrorException, this can be helpful for transaction tests
Example throw new SimpleKafkaClient\KafkaErrorException( &amp;#39;Some error message&amp;#39;, 88, &amp;#39;This is a detailed error string&amp;#39;, false, true, false );</description></item><item><title>__construct</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/__construct/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/__construct/</guid><description>Description public function __construct(Configuration $configuration) {} Get a producer instance
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf);</description></item><item><title>__construct</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/__construct/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/__construct/</guid><description>Description public function __construct(string $topicName, int $partition, int $offset = 0) {} Create new topic partition instance
Example $topicPartition = new SimpleKafkaClient\TopicPartiton(&amp;#39;test-topic&amp;#39;, 0);</description></item><item><title>abortTransaction</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/abortTransaction/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/abortTransaction/</guid><description>Description public function abortTransaction(int $timeoutMs): void {} This function should also be used to recover from non-fatal abortable transaction errors.
Any outstanding messages will be purged and fail with RD_KAFKA_RESP_ERR__PURGE_INFLIGHT or RD_KAFKA_RESP_ERR__PURGE_QUEUE.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (SimpleKafkaClient\KafkaErrorException $e) { if ($e-&amp;gt;$transactionRequiresAbort()) { $producer-&amp;gt;abortTransaction(10000); } }</description></item><item><title>About</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/about/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/about/</guid><description>ConsumerTopic handles are mainly used to query things like:
metadata offsets ProducerTopic handles can be used to query the same things
but are also used to produce messages.</description></item><item><title>assign</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/assign/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/assign/</guid><description>Description public function assign(array $topics): void {} Atomic assignment of partitions to consume.
The new partitions will replace the existing assignment.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $consumer-&amp;gt;assign( [ new SimpleKafkaClient\TopicPartition(&amp;#39;test-topic&amp;#39;, 1, 3000), new SimpleKafkaClient\TopicPartition(&amp;#39;test-topic&amp;#39;, 2, 3009) ] );</description></item><item><title>beginTransaction</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/beginTransaction/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/beginTransaction/</guid><description>Description public function beginTransaction(): void {} SimpleKafkaClient\Producer::initTransactions() must have been called successfully (once)
before this function is called. Any messages produced, offsets sent, etc,
after the successful return of this function will be part of the transaction
and committed or aborted automatically.
Finish the transaction by calling SimpleKafkaClient\Producer::commitTransaction()
or abort the transaction by calling SimpleKafkaClient\Producer::abortTransaction()
$conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $producer-&amp;gt;initTransactions(10000); $producer-&amp;gt;beginTransaction(); // produce some messsages $producer-&amp;gt;commitTransaction(10000);</description></item><item><title>close</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/close/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/close/</guid><description>Description public function close(): void {} Close down the Consumer. This call will block until
the consumer has revoked its assignment, calling the rebalance callback
if it is configured, committed offsets to broker, and left the consumer group. The maximum blocking time is roughly limited to session.timeout.ms.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $consumer-&amp;gt;close();</description></item><item><title>commit</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/commit/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/commit/</guid><description>Description /** * @throws SimpleKafkaClient\Exception */ public function commit($messageOrOffsets): void {} Commit offsets synchronously, block until offsets are
committed or the commit fails and an exception is thrown.
Parameter details If null is passed, latest offsets for the current assignment will be committed Ìf a SimpleKafkaClient\Message is passed, commit offset for a single topic+partition based on the message If an array of SimpleKafkaClient\TopicPartition is passed, commit offsets for the provided list of partitions Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.</description></item><item><title>commitAsync</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/commitAsync/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/commitAsync/</guid><description>Description public function commitAsync($messageOrOffsets): void {} Commit offsets asynchronously
Parameter details If null is passed, latest offsets for the current assignment will be committed Ìf a SimpleKafkaClient\Message is passed, commit offset for a single topic+partition based on the message If an array of SimpleKafkaClient\TopicPartition is passed, commit offsets for the provided list of partitions Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $message = $consumer-&amp;gt;consume(20000); if (RD_KAFKA_RESP_ERR_NO_ERROR !</description></item><item><title>commitTransaction</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/commitTransaction/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/commitTransaction/</guid><description>Description public function commitTransaction(int $timeoutMs): void {} Commit the current transaction (as started with SimpleKafkaClient\Producer::beginTransaction()).
Any outstanding messages will be flushed (delivered) before actually committing the transaction.
If any of the outstanding messages fail permanently the current transaction will enter the
abortable error state and this function will return an abortable error, in this case the
application must call SimpleKafkaClient\Producer::abortTransaction() before attempting a new
transaction with SimpleKafkaClient\Producer::beginTransaction().
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.</description></item><item><title>consume</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/consume/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/consume/</guid><description>Description public function consume(int $timeoutMs): Message {} Consume message(s) (will also get error events and triggers callbacks)
Registered callbacks will be automaically called rebalanceCallback, logCallback, etc.
On error $message-&amp;gt;err will not be RD_KAFKA_ERR_NO_ERROR but contain the acutal error code.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $message = $consumer-&amp;gt;consume(20000); An application should call consume() at regular intervals, even if no messages
are expected, to serve any queued callbacks waiting to be called.</description></item><item><title>dump</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/dump/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/dump/</guid><description>Description public function dump(): array {} Dumps the current configuration
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $conf-&amp;gt;dump();</description></item><item><title>flush</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/flush/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/flush/</guid><description>Description public function flush(int $timeoutMs): int {} Wait until all outstanding produce requests, et.al, are completed.
This should typically be done prior to destroying a producer instance to make sure
all queued and in-flight produce requests are completed before terminating.
This function will call poll() and thus trigger callbacks.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); // produce some messsages $producer-&amp;gt;flush(10000);</description></item><item><title>getAssignment</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getAssignment/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getAssignment/</guid><description>Description public function getAssignment(): array {} Returns the current partition assignment
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $consumer-&amp;gt;assign( [ new SimpleKafkaClient\TopicPartition(&amp;#39;test-topic&amp;#39;, 1, 3000), new SimpleKafkaClient\TopicPartition(&amp;#39;test-topic&amp;#39;, 2, 3009) ] ); var_dump($consumer-&amp;gt;getAssignment());</description></item><item><title>getBrokers</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/metadata/getBrokers/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/metadata/getBrokers/</guid><description>Description public function getBrokers(): Metadata\Collection {} Get metadata of all brokers
Will return a Metadata\Collection of Metadata\Broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo $metadata-&amp;gt;getBrokers()-&amp;gt;current()-&amp;gt;getHost() . PHP_EOL; echo $metadata-&amp;gt;getBrokers()-&amp;gt;current()-&amp;gt;getPort() . PHP_EOL;</description></item><item><title>getCommittedOffsets</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getCommittedOffsets/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getCommittedOffsets/</guid><description>Description public function getCommittedOffsets(array $topics, int $timeoutMs): array {} Returns the committed offsets for topics and partitions for a consumer group
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0); var_dump($consumer-&amp;gt;getCommittedOffsets([$topicPartition], 10000));</description></item><item><title>getErrorCode</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getErrorCode/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getErrorCode/</guid><description>Description public function getErrorCode(): int {} Topic partition error code reported by broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf( &amp;#39;Topic partition error code: %d&amp;#39;, $metadata-&amp;gt;getTopics()-&amp;gt;current()-&amp;gt;getPartitions()-&amp;gt;current()-&amp;gt;getErrorCode() ) . PHP_EOL;</description></item><item><title>getErrorCode</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/topic/getErrorCode/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/topic/getErrorCode/</guid><description>Description public function getErrorCode(): int {} Topic error code reported by broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf(&amp;#39;Topic error code: %d&amp;#39;, $metadata-&amp;gt;getTopics()-&amp;gt;current()-&amp;gt;getErrorCode()) . PHP_EOL;</description></item><item><title>getErrorString</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/getErrorString/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/getErrorString/</guid><description>Description public function getErrorString(): string {} Get error description for this exception
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (SimpleKafkaClient\KafkaErrorException $e) { echo $e-&amp;gt;getErrorString(); }</description></item><item><title>getErrorString</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/message/getErrorString/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/message/getErrorString/</guid><description>Description public function getErrorString(): string {} Get error string of the message
Example echo $message-&amp;gt;getErrorString();</description></item><item><title>getHost</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/broker/getHost/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/broker/getHost/</guid><description>Description public function getHost(): string {} Get host name of metadata broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf(&amp;#39;Broker host: %s&amp;#39;, $metadata-&amp;gt;getBrokers()-&amp;gt;current()-&amp;gt;getHost()) . PHP_EOL;</description></item><item><title>getId</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/broker/getId/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/broker/getId/</guid><description>Description public function getId(): int {} Get host id of metadata broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf(&amp;#39;Broker id: %d&amp;#39;, $metadata-&amp;gt;getBrokers()-&amp;gt;current()-&amp;gt;getId()) . PHP_EOL;</description></item><item><title>getId</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getId/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getId/</guid><description>Description public function getId(): int {} Topic partition id reported by broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf( &amp;#39;Topic partition id: %d&amp;#39;, $metadata-&amp;gt;getTopics()-&amp;gt;current()-&amp;gt;getPartitions()-&amp;gt;current()-&amp;gt;getId() ) . PHP_EOL;</description></item><item><title>getIsrs</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getIsrs/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getIsrs/</guid><description>Description public function getIsrs(): Collection {} Topic partition in-sync replicas reported by broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); $isrs = $metadata-&amp;gt;getTopics()-&amp;gt;current()-&amp;gt;getPartitions()-&amp;gt;current()-&amp;gt;getIsrs(); while ($isrs-&amp;gt;valid()) { echo sprintf(&amp;#39;Insync Replicas id: %d&amp;#39;, $isrs-&amp;gt;current()) . PHP_EOL; $isrs-&amp;gt;next(); }</description></item><item><title>getLeader</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getLeader/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getLeader/</guid><description>Description public function getLeader(): int {} Topic partition leader id reported by broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf( &amp;#39;Topic partition leader: %d&amp;#39;, $metadata-&amp;gt;getTopics()-&amp;gt;current()-&amp;gt;getPartitions()-&amp;gt;current()-&amp;gt;getLeader() ) . PHP_EOL;</description></item><item><title>getMetadata</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getMetadata/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getMetadata/</guid><description>Description function getMetadata(bool $allTopics, int $timeoutMs, ConsumerTopic $topic = null): Metadata {} Get metadata for all topics or a single topic
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $topicHandle = $consumer-&amp;gt;getTopicHandle(&amp;#39;test-topic&amp;#39;); $singleTopicMetadata = $consumer-&amp;gt;metadata(true, $topicHandle, 10000);</description></item><item><title>getMetadata</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/getMetadata/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/getMetadata/</guid><description>Description function getMetadata(bool $allTopics, int $timeoutMs, ConsumerTopic $topic = null): Metadata {} Get metadata for all topics or a single topic
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $topicHandle = $producer-&amp;gt;getTopicHandle(&amp;#39;test-topic&amp;#39;); $singleTopicMetadata = $producer-&amp;gt;metadata(true, $topicHandle, 10000);</description></item><item><title>getName</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/topic/getName/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/topic/getName/</guid><description>Description public function getName(): string {} Topic name reported by broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf(&amp;#39;Topic name: %d&amp;#39;, $metadata-&amp;gt;getTopics()-&amp;gt;current()-&amp;gt;getName()) . PHP_EOL;</description></item><item><title>getName</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/consumerTopic/getName/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/consumerTopic/getName/</guid><description>Description public function getName(): string {} Get topic name
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $consumerTopic = $consumer-&amp;gt;getTopicHandle(&amp;#39;test-topic&amp;#39;); echo sprintf(&amp;#39;Topic name: %s&amp;#39;, $consumerTopic-&amp;gt;getName()) . PHP_EOL;</description></item><item><title>getName</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/prodcuerTopic/getName/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/prodcuerTopic/getName/</guid><description>Description public function getName(): string {} Get topic name
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $producerTopic = $producer-&amp;gt;getTopicHandle(&amp;#39;test-topic&amp;#39;); echo sprintf(&amp;#39;Topic name: %s&amp;#39;, $producerTopic-&amp;gt;getName()) . PHP_EOL;</description></item><item><title>getOffset</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/getOffset/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/getOffset/</guid><description>Description public function getOffset(): int {} Get offset of topic partition
Example $topicPartition = new SimpleKafkaClient\TopicPartiton(&amp;#39;test-topic&amp;#39;, 0, 100); echo sprintf(&amp;#39;TopicPartition offset %d&amp;#39;, $topicPartition-&amp;gt;getOffset()) . PHP_EOL;</description></item><item><title>getOffsetPositions</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getOffsetPositions/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getOffsetPositions/</guid><description>Description public function getOffsetPositions(array $topics): array {} The offset field of each requested partition will be set to the offset of the last consumed message + 1
If there was no previous message RD_KAFKA_OFFSET_INVALID will be returned
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0); $topicPartitionsWithOffsets = $consumer-&amp;gt;getOffsetPositions([$topicPartition]));</description></item><item><title>getOrigBrokerId</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/metadata/getOrigBrokerId/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/metadata/getOrigBrokerId/</guid><description>Description public function getOrigBrokerId(): int {} Get broker id originating this metadata
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf(&amp;#39;Broker id: %d&amp;#39;, $metadata-&amp;gt;getOrigBrokerId()) . PHP_EOL;</description></item><item><title>getOrigBrokerName</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/metadata/getOrigBrokerName/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/metadata/getOrigBrokerName/</guid><description>Description public function getOrigBrokerName(): string {} Get broker name originating this metadata
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf(&amp;#39;Broker id: %d&amp;#39;, $metadata-&amp;gt;getOrigBrokerName()) . PHP_EOL;</description></item><item><title>getPartition</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/getPartition/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/getPartition/</guid><description>Description public function getPartition(): int {} Get partition of topic partition
Example $topicPartition = new SimpleKafkaClient\TopicPartiton(&amp;#39;test-topic&amp;#39;, 0, 100); echo sprintf(&amp;#39;TopicPartition partition %d&amp;#39;, $topicPartition-&amp;gt;getPartition()) . PHP_EOL;</description></item><item><title>getPartitions</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/topic/getPartitions/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/topic/getPartitions/</guid><description>Description public function getPartitions(): Collection {} Topic partitions reported by broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); $topicPartitionsMetadata = $metadata-&amp;gt;getTopics()-&amp;gt;current()-&amp;gt;getPartitions();</description></item><item><title>getPort</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/broker/getPort/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/broker/getPort/</guid><description>Description public function getPort(): int {} Get host port of metadata broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo sprintf(&amp;#39;Broker port: %d&amp;#39;, $metadata-&amp;gt;getBrokers()-&amp;gt;current()-&amp;gt;getPort()) . PHP_EOL;</description></item><item><title>getReplicas</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getReplicas/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/partition/getReplicas/</guid><description>Description public function getReplicas(): Collection {} Topic partition replicas reported by broker
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); $replicas = $metadata-&amp;gt;getTopics()-&amp;gt;current()-&amp;gt;getPartitions()-&amp;gt;current()-&amp;gt;getReplicas(); while ($replicas-&amp;gt;valid()) { echo sprintf(&amp;#39;Insync Replicas id: %d&amp;#39;, $replicas-&amp;gt;current()) . PHP_EOL; $replicas-&amp;gt;next(); }</description></item><item><title>getSubscription</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getSubscription/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getSubscription/</guid><description>Description public function getSubscription(): array {} Return topic names to which the consumer is currently subscribed to
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $consumer-&amp;gt;subscribe([&amp;#39;test-topic&amp;#39;]); var_dump($consumer-&amp;gt;getSubscription());</description></item><item><title>getTopicHandle</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getTopicHandle/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/getTopicHandle/</guid><description>Description public function getTopicHandle(string $topic): ConsumerTopic {} Get a topic handle for a given topic name. A topic handle is needed
for example to query metadata from the broker
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $topicHandle = $consumer-&amp;gt;getTopicHandle(&amp;#39;test-topic&amp;#39;); // use the topic handle for further calls, e.g. to query metadata $singleTopicMetadata = $consumer-&amp;gt;metadata(true, $topicHandle, 10000);</description></item><item><title>getTopicHandle</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/getTopicHandle/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/getTopicHandle/</guid><description>Description public function getTopicHandle(string $topic): ConsumerTopic {} Get a topic handle for a given topic name. A topic handle is needed
for example to query metadata from the broker
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $topicHandle = $producer-&amp;gt;getTopicHandle(&amp;#39;test-topic&amp;#39;); // use the topic handle for further calls, e.g. to query metadata $singleTopicMetadata = $producer-&amp;gt;metadata(true, $topicHandle, 10000);</description></item><item><title>getTopicName</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/getTopicName/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/getTopicName/</guid><description>Description public function getTopicName(): string {} Get topic name of topic partition
Example $topicPartition = new SimpleKafkaClient\TopicPartiton(&amp;#39;test-topic&amp;#39;, 0, 100); echo sprintf(&amp;#39;Topic partition name %s&amp;#39;, $topicPartition-&amp;gt;getTopicName()) . PHP_EOL;</description></item><item><title>getTopics</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/metadata/getTopics/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/metadata/metadata/getTopics/</guid><description>Description public function getTopics(): Metadata\Collection {} Get metadata of all topics (or a single topic if one was provided)
Will return a Metadata\Collection of Metadata\Topic
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $metadata = $producer-&amp;gt;getMetadata(false, 10000); echo &amp;#39;Info about topics&amp;#39; . PHP_EOL; $topics = $metadata-&amp;gt;getTopics(); while ($topics-&amp;gt;valid()) { echo sprintf(&amp;#39;Topic name: %s&amp;#39;, $topics-&amp;gt;current()-&amp;gt;getTopic()) . PHP_EOL; $topics-&amp;gt;next(); }</description></item><item><title>initTransactions</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/initTransactions/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/initTransactions/</guid><description>Description public function initTransactions(int $timeoutMs): void {} Initialize transactions for the producer instance.
This function ensures any transactions initiated by previous instances of
the producer with the same transactional.id are completed.
If the previous instance failed with a transaction in progress the previous
transaction will be aborted. This function needs to be called before any other
transactional or produce functions are called when the transactional.id is configured.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.</description></item><item><title>isFatal</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/isFatal/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/isFatal/</guid><description>Description public function isFatal(): bool {} Check if it is a fatal exception
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (SimpleKafkaClient\KafkaErrorException $e) { if ($e-&amp;gt;isFatal()) { // non-recoverable error } }</description></item><item><title>isRetriable</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/isRetriable/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/isRetriable/</guid><description>Description public function isRetriable(): bool {} Indicates that the operation that caused this exception can be retried.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (SimpleKafkaClient\KafkaErrorException $e) { if ($e-&amp;gt;isRetriable()) { // action can be retried } }</description></item><item><title>kafka_err2name</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_err2name/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_err2name/</guid><description>Description function kafka_err2name(int $errorCode): string {} Returns the name of the error
Example php&amp;gt; echo kafka_err2name(88); UNSTABLE_OFFSET_COMMIT</description></item><item><title>kafka_err2str</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_err2str/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_err2str/</guid><description>Description function kafka_err2str(int $errorCode): string {} Returns the error message of an error code
Example php&amp;gt; echo kafka_err2str(88); Broker: There are unstable offsets that need to be cleared</description></item><item><title>kafka_get_err_descs</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_get_err_descs/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_get_err_descs/</guid><description>Description function kafka_get_err_descs(): array {} Returns a full list of error codes and their description
Result structure [ [ &amp;#34;code&amp;#34; =&amp;gt; 88, &amp;#34;name&amp;#34; =&amp;gt; &amp;#34;UNSTABLE_OFFSET_COMMIT&amp;#34;, &amp;#34;desc&amp;#34; =&amp;gt; &amp;#34;Broker: There are unstable offsets that need to be cleared&amp;#34; ], ... ]</description></item><item><title>kafka_offset_tail</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_offset_tail/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_offset_tail/</guid><description>Description function kafka_offset_tail(int $offset): int {} Returns an offset value that is $offset before the tail of the topic</description></item><item><title>kafka_thread_cnt</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_thread_cnt/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/functions/kafka_thread_cnt/</guid><description>Description function kafka_thread_cnt(): int {} Retrieve the current number of threads in use by librdkafka</description></item><item><title>offsetsForTimes</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/offsetForTimes/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/offsetForTimes/</guid><description>Description public function offsetsForTimes(array $topicPartitions, int $timeoutMs): array {} Look up the offsets for the given partitions by timestamp.
The returned offset for each partition is the earliest offset whose
timestamp is greater than or equal to the given timestamp in the
corresponding partition.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0, strtotime(&amp;#34;-1 week&amp;#34;)); $offsetsOneWeekAgo = $consumer-&amp;gt;offsetForTimes([$topicPartition], 10000);</description></item><item><title>offsetsForTimes</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/offsetForTimes/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/offsetForTimes/</guid><description>Description public function offsetsForTimes(array $topicPartitions, int $timeoutMs): array {} Look up the offsets for the given partitions by timestamp.
The returned offset for each partition is the earliest offset whose
timestamp is greater than or equal to the given timestamp in the
corresponding partition.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0, strtotime(&amp;#34;-1 week&amp;#34;)); $offsetsOneWeekAgo = $producer-&amp;gt;offsetForTimes([$topicPartition], 10000);</description></item><item><title>poll</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/poll/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/poll/</guid><description>Description public function poll(int $timeoutMs): int {} Polls for events, provided callbacks will be called accordingly
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); // produce some messsages $producer-&amp;gt;poll(0); The producer needs to call poll at regular intervals to serve any queued callbacks
waiting to be called, otherwise the internal queue fill up and block the producer.</description></item><item><title>produce</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/prodcuerTopic/produce/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/prodcuerTopic/produce/</guid><description>Description public function produce( int $partition, int $msgFlags, ?string $payload = null, ?string $key = null ): void {} Produce a message to a topic partition
This is an asynchronous and non-blocking call
Parameter details partition: can be either a partition number or RD_KAFKA_PARTITION_UA for automatic partitioning
msgflags: 0 or RD_KAFKA_MSG_F_BLOCK to block the producer if the queue is full
key: message key, if non-null the topic partitioner will calculate the partition according to the key</description></item><item><title>producev</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/prodcuerTopic/producev/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicHandles/prodcuerTopic/producev/</guid><description>Description public function producev( int $partition, int $msgFlags, ?string $payload = null, ?string $key = null, ?array $headers = null, ?int $timestampMs = null ): void {} Produce a message and additional data to a topic partition
This is an asynchronous and non-blocking call
Parameter details partition: can be either a partition number or RD_KAFKA_PARTITION_UA for automatic partitioning
msgflags: 0 or RD_KAFKA_MSG_F_BLOCK to block the producer if the queue is full</description></item><item><title>Properties</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/message/properties/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/message/properties/</guid><description>Description The message object&amp;rsquo;s data can be accessed by it&amp;rsquo;s public properties
err the error code (or in case of success RD_KAFKA_RESP_ERR_NO_ERROR) topic_name topic name of message partition partition number of message payload payload of the message len length of the payload key key of the message offset offset of the message headers headers of the message (or null)</description></item><item><title>purge</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/purge/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/purge/</guid><description>Description public function purge(int $purgeFlags): int {} Purges messages handled by the producer.
The application will need to call poll() or flush() afterwards
to serve the delivery report callbacks of the purged messages.
Messages purged from internal queues fail with the delivery report error code
set to RD_KAFKA_RESP_ERR__PURGE_QUEUE, while purged messages that are in-flight
to or from the broker will fail with the error code set to RD_KAFKA_RESP_ERR__PURGE_INFLIGHT.
Purge flags RD_KAFKA_PURGE_F_QUEUE purge internal queue RD_KAFKA_PURGE_F_INFLIGHT purge messages in-flight to or from the broker RD_KAFKA_PURGE_F_NON_BLOCKING make the call non-blocking Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.</description></item><item><title>queryWatermarkOffsets</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/queryWatermarkOffsets/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/queryWatermarkOffsets/</guid><description>Description public function queryWatermarkOffsets(string $topic, int $partition, int &amp;amp;$low, int &amp;amp;$high, int $timeoutMs): void {} Query broker for low (oldest) and high (newest) offsets for a partition
Example $low = 0; $high = 0; $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0, strtotime(&amp;#34;-1 week&amp;#34;)); $consumer-&amp;gt;queryWatermarkOffsets(&amp;#39;test-topic&amp;#39;, 0, int &amp;amp;$low, int &amp;amp;$high, 10000);</description></item><item><title>queryWatermarkOffsets</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/queryWatermarkOffsets/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/producer/queryWatermarkOffsets/</guid><description>Description public function queryWatermarkOffsets(string $topic, int $partition, int &amp;amp;$low, int &amp;amp;$high, int $timeoutMs): void {} Query broker for low (oldest) and high (newest) offsets for a partition
Example $low = 0; $high = 0; $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0, strtotime(&amp;#34;-1 week&amp;#34;)); $producer-&amp;gt;queryWatermarkOffsets(&amp;#39;test-topic&amp;#39;, 0, int &amp;amp;$low, int &amp;amp;$high, 10000);</description></item><item><title>Release v0.1.0</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/whats-new/release-0.1.0/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/whats-new/release-0.1.0/</guid><description>Initial extension release</description></item><item><title>set</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/set/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/set/</guid><description>Description public function set(string $name, string $value): void {} Set a configuration value
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;);</description></item><item><title>setDrMsgCb</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setDrMsgCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setDrMsgCb/</guid><description>Description public function setDrMsgCb(callable $callback): void {} Set a message delivery report callback
This callback is called exactly once per message, indicating if
the message was succesfully delivered or permanently failed delivery
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;setDrMsgCb( function (Producer $kafka, Message $message) { if (RD_KAFKA_RESP_ERR_NO_ERROR !== $message-&amp;gt;err) { $errorStr = rd_kafka_err2str($message-&amp;gt;err); echo sprintf(&amp;#39;Message FAILED (%s, %s) to send with payload =&amp;gt; %s&amp;#39;, $message-&amp;gt;err, $errorStr, $message-&amp;gt;payload) . PHP_EOL; } else { // message successfully delivered echo sprintf(&amp;#39;Message sent SUCCESSFULLY with payload =&amp;gt; %s&amp;#39;, $message-&amp;gt;payload) .</description></item><item><title>setErrorCb</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setErrorCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setErrorCb/</guid><description>Description public function setErrorCb(callable $callback): void {} Gets triggered for every error that occurs in librdkafka, keep in mind
that non-critical errors will be retried by libdrkafka
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;setErrorCb( function (SimpleKafkaClient\Kafka $kafka, $errorCode, $reason) { //do something } );</description></item><item><title>setLogCb</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setLogCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setLogCb/</guid><description>Description public function setLogCb(callable $callback): void {} Set a log callback
You will get events according to the log_level setting
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;setLogCb( function (SimpleKafkaClient\Kafka $kafka, int $level, string $facility, string $message) { //do something } );</description></item><item><title>setOffset</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/setOffset/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/setOffset/</guid><description>Description public function setOffset(int $offset): TopicPartition {} Set offset of topic partition
Example $topicPartition = new SimpleKafkaClient\TopicPartiton(&amp;#39;test-topic&amp;#39;, 0); $topicPartition-&amp;gt;setOffset(100);</description></item><item><title>setOffsetCommitCb</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setOffsetCommitCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setOffsetCommitCb/</guid><description>Description public function setOffsetCommitCb(callable $callback): void {} Set offset commit callback for use with consumer groups.
The results of automatic or manual offset commits will be scheduled
for this callback. If no partitions had valid offsets to commit
this callback will be called with err == RD_KAFKA_RESP_ERR__NO_OFFSET
which is not to be considered an error.
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;setOffsetCommitCb( function (SimpleKafkaClient\Kafka $kafka, int $errorCode, array $topicPartition) { if (RD_KAFKA_RESP_ERR_NO_ERROR === $errorCode) { echo &amp;#39;Commit was successful&amp;#39;; } else { echo &amp;#39;Commit failed&amp;#39;; } } );</description></item><item><title>setPartition</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/setPartition/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/setPartition/</guid><description>Description public function setPartition(int $partition): TopicPartition {} Set partition of topic partition
Example $topicPartition = new SimpleKafkaClient\TopicPartiton(&amp;#39;test-topic&amp;#39;, 0); $topicPartition-&amp;gt;setPartition(1);</description></item><item><title>setRebalanceCb</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setRebalanceCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setRebalanceCb/</guid><description>Description public function setRebalanceCb(callable $callback): void {} Set a rebalance callback for use with coordinated consumer group balancing.
The $errorCode is set to either RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS
or RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS and &amp;lsquo;partitions&amp;rsquo; contains
the full partition set that was either assigned or revoked.
Registering a rebalance callback turns off the automatic partition
assignment/revocation and instead delegates that responsibility
to the application&amp;rsquo;s callback.
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;setRebalanceCb( function (SimpleKafkaClient\Consumer $kafka, int $errorCode, array $partitions = null) { case RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS: $kafka-&amp;gt;assign($partitions); break; case RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS: if ($manual_commits) { // Optional explicit manual commit $kafka-&amp;gt;commit($partitions); } //revoke partitions $kafka-&amp;gt;assign(NULL); break; default: // handle arbitrary rebalancing failure .</description></item><item><title>setStatsCb</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setStatsCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/configuration/setStatsCb/</guid><description>Description public function setStatsCb(callable $callback): void {} Set a statistics callback
The statistics callback is triggered every statistics.interval.ms (needs to be configured separately).
Example $conf = new SimpleKafkaClient\Configuration(); $conf-&amp;gt;setStatsCb( function (SimpleKafkaClient\Kafka $kafka, string $json, int $jsonLength) { //do something } );</description></item><item><title>setTopicName</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/setTopicName/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/topicPartition/setTopicName/</guid><description>Description public function setTopicName(string $topicName): TopicPartition {} Set topic name of topic partition
Example $topicPartition = new SimpleKafkaClient\TopicPartiton(&amp;#39;test-topic&amp;#39;, 0); $topicPartition-&amp;gt;setTopicName(&amp;#39;another-test-topic&amp;#39;);</description></item><item><title>subscribe</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/subscribe/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/subscribe/</guid><description>Description public function subscribe(array $topics): void {} Subscribe to one or more topics (regexp also supported).
Any previous subscription will be unassigned and unsubscribed first.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $consumer-&amp;gt;subscribe([&amp;#39;test-topic&amp;#39;]);</description></item><item><title>transactionRequiresAbort</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/transactionRequiresAbort/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/transactionRequiresAbort/</guid><description>Description public function transactionRequiresAbort(): bool {} Check if error needs the transaction to be aborted
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (SimpleKafkaClient\KafkaErrorException $e) { if ($e-&amp;gt;$transactionRequiresAbort()) { $producer-&amp;gt;abortTransaction(10000); } }</description></item><item><title>unsubscribe</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/unsubscribe/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/consumer/unsubscribe/</guid><description>Description public function unsubscribe(): void {} Unsubscribe from the current subscriptions
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new SimpleKafkaClient\Consumer($conf); $consumer-&amp;gt;subscribe([&amp;#39;test-topic&amp;#39;]); $consumer-&amp;gt;unsubscribe();</description></item></channel></rss>