<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KafkaException on Documentation of php-simple-kafka-client</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/</link><description>Recent content in KafkaException on Documentation of php-simple-kafka-client</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Dec 2020 22:09:37 +0100</lastBuildDate><atom:link href="https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/index.xml" rel="self" type="application/rss+xml"/><item><title>__construct</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/__construct/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/__construct/</guid><description>Description public function __construct( string $message, int $code, string $error_string, bool $isFatal, bool $isRetriable, bool $transactionRequiresAbort ) {} Create new KafkaErrorException, this can be helpful for transaction tests
Example throw new SimpleKafkaClient\KafkaErrorException( &amp;#39;Some error message&amp;#39;, 88, &amp;#39;This is a detailed error string&amp;#39;, false, true, false );</description></item><item><title>getErrorString</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/getErrorString/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/getErrorString/</guid><description>Description public function getErrorString(): string {} Get error description for this exception
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (SimpleKafkaClient\KafkaErrorException $e) { echo $e-&amp;gt;getErrorString(); }</description></item><item><title>isFatal</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/isFatal/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/isFatal/</guid><description>Description public function isFatal(): bool {} Check if it is a fatal exception
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (SimpleKafkaClient\KafkaErrorException $e) { if ($e-&amp;gt;isFatal()) { // non-recoverable error } }</description></item><item><title>isRetriable</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/isRetriable/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/isRetriable/</guid><description>Description public function isRetriable(): bool {} Indicates that the operation that caused this exception can be retried.
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (SimpleKafkaClient\KafkaErrorException $e) { if ($e-&amp;gt;isRetriable()) { // action can be retried } }</description></item><item><title>transactionRequiresAbort</title><link>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/transactionRequiresAbort/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/php-simple-kafka-client.github.io/kafkaException/transactionRequiresAbort/</guid><description>Description public function transactionRequiresAbort(): bool {} Check if error needs the transaction to be aborted
Example $conf = SimpleKafkaClient\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new SimpleKafkaClient\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (SimpleKafkaClient\KafkaErrorException $e) { if ($e-&amp;gt;$transactionRequiresAbort()) { $producer-&amp;gt;abortTransaction(10000); } }</description></item></channel></rss>